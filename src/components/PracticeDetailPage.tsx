import React, { useState, useEffect } from 'react';
import { API_BASE_URL, type AuthState } from '../common/config/supabase';
import { SimpleMarkdownRenderer } from './SimpleMarkdownRenderer';
import './PracticeDetailPage.css';

interface PracticeDetailProps {
  sessionId: string;
  authState: AuthState;
  onBack: () => void;
}

interface DetailedSession {
  sessionId: number;
  status: string;
  progress: {
    percent: number;
    stage: string;
    message: string;
  };
  fileInfo: {
    originalName: string;
    fileSize: number;
    mimeType: string;
  };
  ocrResult: {
    recognizedText: string;
    confidence: number;
  } | null;
  gradingResult: {
    score: number;
    maxScore: number;
    feedback: string;
    suggestions: any[];
    strengths: any[];
    questionCount?: number;
    incorrectCount?: number;
    correctCount?: number;
    knowledgePoints?: string[];
    detailedErrors?: any[];
    improvementAreas?: string[];
    nextStepRecommendations?: string[];
  } | null;
  submittedAt: string;
  completedAt?: string;
}

interface SimilarQuestion {
  id: number;
  content: string;
  standardAnswer: string;
  difficultyLevel: number;
  knowledgePoints: string[];
  aiGradingResult?: {
    score: number;
    maxScore: number;
    feedback: string;
    strengths: string[];
    improvements: string[];
  };
}

interface SimilarQuestionsParams {
  difficultyLevel: number;
  questionCount: number;
}

export const PracticeDetailPage: React.FC<PracticeDetailProps> = ({ 
  sessionId, 
  authState, 
  onBack 
}) => {
  const [session, setSession] = useState<DetailedSession | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const [aiQuestion, setAiQuestion] = useState('');
  const [aiThinking, setAiThinking] = useState(false);
  const [chatHistory, setChatHistory] = useState<{question: string, answer: string}[]>([]);
  
  // Á±ª‰ººÈ¢òÁõ∏ÂÖ≥Áä∂ÊÄÅ
  const [similarQuestions, setSimilarQuestions] = useState<SimilarQuestion[]>([]);
  const [similarQuestionsParams, setSimilarQuestionsParams] = useState<SimilarQuestionsParams>({
    difficultyLevel: 3,
    questionCount: 3
  });
  const [generatingSimilar, setGeneratingSimilar] = useState(false);
  const [visibleAnswers, setVisibleAnswers] = useState<Set<number>>(new Set());
  const [questionAnswers, setQuestionAnswers] = useState<{[key: number]: string}>({});
  const [questionRatings, setQuestionRatings] = useState<{[key: number]: number}>({});

  useEffect(() => {
    loadSessionDetails();
  }, [sessionId, authState.token]);

  const loadSessionDetails = async () => {
    if (!authState.token) return;

    try {
      setLoading(true);
      setError('');

      const response = await fetch(`${API_BASE_URL}/practice/${sessionId}/status`, {
        headers: { 'Authorization': `Bearer ${authState.token}` }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setSession(result.data);
        } else {
          setError(result.error || 'Ëé∑ÂèñÁªÉ‰π†ËØ¶ÊÉÖÂ§±Ë¥•');
        }
      } else {
        // Â∞ùËØïËß£ÊûêÈîôËØØÂìçÂ∫î
        try {
          const errorResult = await response.json();
          setError(errorResult.error || `HTTP ${response.status}: Ëé∑ÂèñÁªÉ‰π†ËØ¶ÊÉÖÂ§±Ë¥•`);
        } catch {
          setError(`HTTP ${response.status}: Ëé∑ÂèñÁªÉ‰π†ËØ¶ÊÉÖÂ§±Ë¥•`);
        }
      }
    } catch (err) {
      console.error('Âä†ËΩΩÁªÉ‰π†ËØ¶ÊÉÖÂ§±Ë¥•:', err);
      setError('Âä†ËΩΩÁªÉ‰π†ËØ¶ÊÉÖÂ§±Ë¥•');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteSession = async () => {
    if (!authState.token) return;

    try {
      setDeleting(true);
      const response = await fetch(`${API_BASE_URL}/practice/${sessionId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${authState.token}` }
      });

      const result = await response.json();

      if (result.success) {
        // Âà†Èô§ÊàêÂäüÔºåËøîÂõûÂà∞ÂàóË°®È°µÈù¢
        onBack();
      } else {
        setError(`Âà†Èô§Â§±Ë¥•: ${result.error}`);
      }
    } catch (err) {
      console.error('Âà†Èô§ÁªÉ‰π†ËÆ∞ÂΩïÂ§±Ë¥•:', err);
      setError('Âà†Èô§ÁªÉ‰π†ËÆ∞ÂΩïÂ§±Ë¥•');
    } finally {
      setDeleting(false);
      setShowDeleteDialog(false);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'UPLOADED': return 'üì§';
      case 'PROCESSING': return 'üîÑ';
      case 'COMPLETED': return '‚úÖ';
      case 'FAILED': return '‚ùå';
      default: return 'üìù';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return '#10b981';
    if (score >= 80) return '#3b82f6';
    if (score >= 70) return '#f59e0b';
    if (score >= 60) return '#f97316';
    return '#ef4444';
  };

  // Á±ª‰ººÈ¢òÁõ∏ÂÖ≥ÂáΩÊï∞
  const generateSimilarQuestions = async () => {
    if (!authState.token || !session || generatingSimilar) return;

    try {
      setGeneratingSimilar(true);
      
      const response = await fetch(`${API_BASE_URL}/practice/${sessionId}/generate-similar`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authState.token}`
        },
        body: JSON.stringify(similarQuestionsParams)
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setSimilarQuestions(result.data.generatedQuestions || []);
        } else {
          setError('ÁîüÊàêÁ±ª‰ººÈ¢òÂ§±Ë¥•: ' + (result.error || 'Êú™Áü•ÈîôËØØ'));
        }
      } else {
        setError('ÁîüÊàêÁ±ª‰ººÈ¢òÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
      }
    } catch (error) {
      console.error('ÁîüÊàêÁ±ª‰ººÈ¢òÂá∫Èîô:', error);
      setError('ÁîüÊàêÁ±ª‰ººÈ¢òÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•');
    } finally {
      setGeneratingSimilar(false);
    }
  };

  const toggleAnswerVisibility = (questionId: number) => {
    setVisibleAnswers(prev => {
      const newSet = new Set(prev);
      if (newSet.has(questionId)) {
        newSet.delete(questionId);
      } else {
        newSet.add(questionId);
      }
      return newSet;
    });
  };

  // ‰∏ãËΩΩDOCXÊñá‰ª∂ÂäüËÉΩ
  const downloadDocx = async () => {
    if (!session || !authState.token) return;
    
    try {
      const response = await fetch(`${API_BASE_URL}/ocr/download/docx/${session.submissionId}`, {
        headers: { 'Authorization': `Bearer ${authState.token}` }
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `ocr-result-${session.submissionId}.docx`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        console.error('‰∏ãËΩΩDOCXÂ§±Ë¥•:', response.statusText);
      }
    } catch (error) {
      console.error('‰∏ãËΩΩDOCXÂá∫Èîô:', error);
    }
  };

  const submitSimilarQuestionAnswer = async (questionId: number) => {
    const userAnswer = questionAnswers[questionId];
    if (!userAnswer?.trim() || !authState.token) return;

    try {
      const response = await fetch(`${API_BASE_URL}/practice/similar-questions/${questionId}/submit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authState.token}`
        },
        body: JSON.stringify({
          userAnswer: userAnswer.trim(),
          requestFeedback: true
        })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success && result.data.aiGradingResult) {
          // Êõ¥Êñ∞È¢òÁõÆÁöÑAIËØÑÂàÜÁªìÊûú
          setSimilarQuestions(prev => prev.map(q => 
            q.id === questionId 
              ? { ...q, aiGradingResult: result.data.aiGradingResult }
              : q
          ));
        }
      } else {
        setError('Êèê‰∫§Á≠îÊ°àÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
      }
    } catch (error) {
      console.error('Êèê‰∫§Á≠îÊ°àÂá∫Èîô:', error);
      setError('Êèê‰∫§Á≠îÊ°àÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•');
    }
  };

  const rateQuestion = async (questionId: number, rating: number) => {
    if (!authState.token) return;

    try {
      setQuestionRatings(prev => ({ ...prev, [questionId]: rating }));
      
      await fetch(`${API_BASE_URL}/practice/similar-questions/${questionId}/rate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authState.token}`
        },
        body: JSON.stringify({ rating })
      });
    } catch (error) {
      console.error('ËØÑÂàÜÂ§±Ë¥•:', error);
      // ÈùôÈªòÂ§ÑÁêÜËØÑÂàÜÈîôËØØÔºå‰∏çÂΩ±ÂìçÁî®Êà∑‰ΩìÈ™å
    }
  };

  const handleAskAI = async () => {
    if (!aiQuestion.trim() || aiThinking || !authState.token) return;

    try {
      setAiThinking(true);
      
      const response = await fetch(`${API_BASE_URL}/ai/follow-up`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authState.token}`
        },
        body: JSON.stringify({
          submissionId: parseInt(sessionId),
          question: aiQuestion.trim()
        })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // Ê∑ªÂä†Âà∞ËÅäÂ§©ÂéÜÂè≤
          setChatHistory(prev => [...prev, {
            question: aiQuestion.trim(),
            answer: result.data.answer || 'Êä±Ê≠âÔºåÊàëÊó†Ê≥ïÂõûÁ≠îËøô‰∏™ÈóÆÈ¢ò„ÄÇ'
          }]);
          // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
          setAiQuestion('');
        } else {
          // Â¶ÇÊûúAPIË∞ÉÁî®Â§±Ë¥•ÔºåÊèê‰æõÈÄöÁî®ÂõûÂ§ç
          setChatHistory(prev => [...prev, {
            question: aiQuestion.trim(),
            answer: 'Êä±Ê≠âÔºåÂΩìÂâçAIÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ'
          }]);
          setAiQuestion('');
        }
      } else {
        // Â¶ÇÊûúÊ≤°Êúâ‰∏ìÈó®ÁöÑquestioningÁ´ØÁÇπÔºåÊèê‰æõÈÄöÁî®ÂõûÂ§ç
        setChatHistory(prev => [...prev, {
          question: aiQuestion.trim(),
          answer: 'ÊÑüË∞¢‰Ω†ÁöÑÊèêÈóÆÔºÅAIÈóÆÁ≠îÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠ÔºåÊöÇÊó∂Êó†Ê≥ïÊèê‰æõËØ¶ÁªÜÂõûÁ≠î„ÄÇ‰Ω†ÂèØ‰ª•Êü•Áúã‰∏äÊñπÁöÑÊâπÊîπÁªìÊûúÂíåÊîπËøõÂª∫ËÆÆ„ÄÇ'
        }]);
        setAiQuestion('');
      }
    } catch (error) {
      console.error('AIÊèêÈóÆÂ§±Ë¥•:', error);
      // Êèê‰æõÂèãÂ•ΩÁöÑÈîôËØØÂõûÂ§ç
      setChatHistory(prev => [...prev, {
        question: aiQuestion.trim(),
        answer: 'Êä±Ê≠âÔºåÁΩëÁªúËøûÊé•Âá∫Áé∞ÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï„ÄÇ'
      }]);
      setAiQuestion('');
    } finally {
      setAiThinking(false);
    }
  };

  const renderErrorDetails = (errors: any[]) => {
    if (!errors || errors.length === 0) return null;

    return (
      <div className="error-details enhanced">
        <div className="section-header">
          <h4>üîç ÈîôËØØËØ¶ÊÉÖÂàÜÊûê</h4>
          <span className="count-badge error">{errors.length}</span>
        </div>
        <div className="error-list">
          {errors.map((error, index) => (
            <div key={index} className="error-item enhanced">
              <div className="error-icon">
                {error.severity === 'major' ? 'üî¥' : 
                 error.severity === 'minor' ? 'üü¢' : 'üü°'}
              </div>
              <div className="error-content">
                <div className="error-header">
                  <span className="error-type">{error.errorType || 'ÈîôËØØ'}</span>
                  {error.severity && (
                    <span className={`error-severity ${error.severity}`}>
                      {error.severity === 'major' ? '‰∏•Èáç' : 
                       error.severity === 'minor' ? 'ËΩªÂæÆ' : '‰∏≠Á≠â'}
                    </span>
                  )}
                </div>
                {error.content && (
                  <div className="error-section">
                    <span className="section-label">ÈóÆÈ¢òÂÜÖÂÆπÔºö</span>
                    <span className="section-content">{error.content}</span>
                  </div>
                )}
                {error.correction && (
                  <div className="error-section correction">
                    <span className="section-label">Ê≠£Á°ÆÁ≠îÊ°àÔºö</span>
                    <span className="section-content">{error.correction}</span>
                  </div>
                )}
                {error.explanation && (
                  <div className="error-section explanation">
                    <span className="section-label">Ëß£ÈáäÔºö</span>
                    <span className="section-content">{error.explanation}</span>
                  </div>
                )}
                {error.knowledgePoint && (
                  <div className="error-section knowledge">
                    <span className="section-label">Áõ∏ÂÖ≥Áü•ËØÜÁÇπÔºö</span>
                    <span className="knowledge-tag-inline enhanced">{error.knowledgePoint}</span>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderSuggestions = (suggestions: any[]) => {
    if (!suggestions || suggestions.length === 0) return null;

    return (
      <div className="suggestions-details enhanced">
        <div className="section-header">
          <h4>üí° ÊîπËøõÂª∫ËÆÆ</h4>
          <span className="count-badge suggestion">{suggestions.length}</span>
        </div>
        <div className="suggestion-list">
          {suggestions.map((suggestion, index) => (
            <div key={index} className="suggestion-item enhanced">
              <div className="suggestion-icon">
                {suggestion.priority === 'high' ? 'üî•' : 
                 suggestion.priority === 'medium' ? '‚ö°' : 'üí≠'}
              </div>
              <div className="suggestion-content">
                <div className="suggestion-header">
                  <span className="suggestion-aspect">{suggestion.aspect || 'Âª∫ËÆÆ'}</span>
                  {suggestion.priority && (
                    <span className={`priority-badge ${suggestion.priority}`}>
                      {suggestion.priority === 'high' ? 'È´ò‰ºòÂÖàÁ∫ß' : 
                       suggestion.priority === 'medium' ? '‰∏≠‰ºòÂÖàÁ∫ß' : '‰Ωé‰ºòÂÖàÁ∫ß'}
                    </span>
                  )}
                </div>
                <div className="suggestion-description">
                  {suggestion.recommendation || suggestion.description || suggestion}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderStrengths = (strengths: any[]) => {
    if (!strengths || strengths.length === 0) return null;

    return (
      <div className="strengths-details enhanced">
        <div className="section-header">
          <h4>üåü ‰ºòÁÇπÂàÜÊûê</h4>
          <span className="count-badge strength">{strengths.length}</span>
        </div>
        <div className="strength-list">
          {strengths.map((strength, index) => (
            <div key={index} className="strength-item enhanced">
              <div className="strength-icon">
                {strength.importance === 'high' ? '‚≠ê' : 
                 strength.importance === 'medium' ? '‚ú®' : 'üí´'}
              </div>
              <div className="strength-content">
                <div className="strength-header">
                  <span className="strength-aspect">{strength.aspect || '‰ºòÁÇπ'}</span>
                  {strength.importance && (
                    <span className={`importance-badge ${strength.importance}`}>
                      {strength.importance === 'high' ? 'ÈùûÂ∏∏ÈáçË¶Å' : 
                       strength.importance === 'medium' ? 'ÊØîËæÉÈáçË¶Å' : '‰∏ÄËà¨ÈáçË¶Å'}
                    </span>
                  )}
                </div>
                <div className="strength-description">
                  {strength.description || strength}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="practice-detail-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Âä†ËΩΩÁªÉ‰π†ËØ¶ÊÉÖ‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="practice-detail-page">
        <div className="error-container">
          <div className="error-icon">‚ùå</div>
          <h3>Âä†ËΩΩÂ§±Ë¥•</h3>
          <p>{error}</p>
          <button className="retry-btn" onClick={loadSessionDetails}>
            ÈáçËØï
          </button>
          <button className="back-btn" onClick={onBack}>
            ËøîÂõû
          </button>
        </div>
      </div>
    );
  }

  if (!session) {
    return (
      <div className="practice-detail-page">
        <div className="error-container">
          <div className="error-icon">üìù</div>
          <h3>ÁªÉ‰π†ËÆ∞ÂΩï‰∏çÂ≠òÂú®</h3>
          <button className="back-btn" onClick={onBack}>
            ËøîÂõû
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="practice-detail-fullpage">
      {/* È°∂ÈÉ®ÂØºËà™Ê†è */}
      <div className="detail-navbar">
        <div className="navbar-left">
          <button className="back-button" onClick={onBack}>
            ‚Üê ËøîÂõû
          </button>
          <div className="file-title">
            <span className="status-icon">{getStatusIcon(session.status)}</span>
            <h2>{session.fileInfo.originalName}</h2>
          </div>
        </div>
        <div className="navbar-right">
          <div className="score-display">
            {session.gradingResult && (
              <div className="score-card">
                <div className="score-circle">
                  <div className="score-number">{session.gradingResult.score}</div>
                  <div className="score-divider">/</div>
                  <div className="score-max">{session.gradingResult.maxScore}</div>
                </div>
                <div className="score-label">
                  {session.gradingResult.score >= 90 ? '‰ºòÁßÄ' :
                   session.gradingResult.score >= 80 ? 'ËâØÂ•Ω' :
                   session.gradingResult.score >= 70 ? '‰∏≠Á≠â' :
                   session.gradingResult.score >= 60 ? 'ÂèäÊ†º' : 'ÈúÄÊîπËøõ'}
                </div>
              </div>
            )}
          </div>
          <button 
            className="delete-button" 
            onClick={() => setShowDeleteDialog(true)}
          >
            üóëÔ∏è
          </button>
        </div>
      </div>

      {/* ‰∏ªÂÜÖÂÆπÂå∫Âüü - Â∑¶Âè≥ÂàÜÊ†è */}
      <div className="detail-content">
        {/* Â∑¶‰æßÔºöËØÜÂà´ÁªìÊûú */}
        <div className="left-panel">
          <div className="panel-header">
            <h3>üìã ‰Ωú‰∏öËØÜÂà´</h3>
            <div className="file-meta">
              <span>{(session.fileInfo.fileSize / 1024 / 1024).toFixed(2)} MB</span>
              <span>{new Date(session.submittedAt).toLocaleString('zh-CN')}</span>
            </div>
          </div>
          
          <div className="recognition-content">
            {session.progress.stage === 'ocr_processing' && (
              <div className="processing-indicator">
                <div className="loading-spinner"></div>
                <p>Ê≠£Âú®ËØÜÂà´ÊñáÊ°£ÂÜÖÂÆπ...</p>
              </div>
            )}
            
            {session.ocrResult ? (
              <div className="ocr-result">
                <div className="confidence-info">
                  <span>ËØÜÂà´ÁΩÆ‰ø°Â∫¶: {(session.ocrResult.confidence * 100).toFixed(1)}%</span>
                  <button 
                    className="download-docx-btn"
                    onClick={downloadDocx}
                    title="‰∏ãËΩΩWordÊ†ºÂºèÊñáÊ°£"
                  >
                    üìÑ ‰∏ãËΩΩDOCX
                  </button>
                </div>
                <div className="recognized-text">
                  <SimpleMarkdownRenderer 
                    content={session.ocrResult?.recognizedText || ''} 
                    className="ocr-content"
                  />
                </div>
              </div>
            ) : session.status === 'COMPLETED' || session.status === 'FAILED' ? (
              <div className="error-content">
                <div className="error-icon">‚ö†Ô∏è</div>
                <h4>OCRËØÜÂà´Â§±Ë¥•</h4>
                <p>ÊñáÊ°£ËØÜÂà´ËøáÁ®ã‰∏≠Âá∫Áé∞ÈóÆÈ¢òÔºåÂèØËÉΩÊòØÊñá‰ª∂Ê†ºÂºè‰∏çÊîØÊåÅÊàñÂÜÖÂÆπÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶„ÄÇ</p>
                <div className="contact-info">
                  <p><strong>Â¶ÇÈúÄÂ∏ÆÂä©ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòÔºö</strong></p>
                  <p>üìß <a href="mailto:3220104512@zju.edu.cn">3220104512@zju.edu.cn</a></p>
                </div>
              </div>
            ) : (
              <div className="empty-content">
                <p>üìÑ OCRËØÜÂà´ÁªìÊûúÂ∞ÜÂú®Ê≠§ÊòæÁ§∫</p>
              </div>
            )}
          </div>
        </div>

        {/* Âè≥‰æßÔºöAIÊâπÊîπÁªìÊûú */}
        <div className="right-panel">
          <div className="panel-header">
            <h3>ü§ñ AIÊâπÊîπËß£Á≠î</h3>
            {session.gradingResult && (
              <div className="grading-summary">
                <span className="question-count">È¢òÁõÆÊï∞: {session.gradingResult.questionCount || 0}</span>
                <span className="correct-count">Ê≠£Á°Æ: {session.gradingResult.correctCount || 0}</span>
                <span className="incorrect-count">ÈîôËØØ: {session.gradingResult.incorrectCount || 0}</span>
              </div>
            )}
          </div>

          <div className="grading-content">
            {session.progress.stage === 'ai_processing' && (
              <div className="processing-indicator">
                <div className="loading-spinner"></div>
                <p>AIÊ≠£Âú®Êô∫ËÉΩÊâπÊîπ...</p>
              </div>
            )}

            {session.gradingResult ? (
              <div className="grading-result">
                {/* Áü•ËØÜÁÇπ */}
                {session.gradingResult.knowledgePoints && session.gradingResult.knowledgePoints.length > 0 && (
                  <div className="knowledge-points-section enhanced">
                    <div className="section-header">
                      <h4>üìö Ê∂âÂèäÁü•ËØÜÁÇπ</h4>
                      <span className="count-badge">{session.gradingResult.knowledgePoints.length}</span>
                    </div>
                    <div className="knowledge-tags enhanced">
                      {session.gradingResult.knowledgePoints.map((point, index) => (
                        <span key={index} className="knowledge-tag enhanced">
                          <span className="tag-icon">üìñ</span>
                          <span className="tag-text">{point}</span>
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* AIÂèçÈ¶à */}
                <div className="feedback-section enhanced">
                  <div className="section-header">
                    <h4>üìù AIÂàÜÊûêÂèçÈ¶à</h4>
                    <div className="feedback-stats">
                      <span className="stat-item">
                        <span className="stat-icon">‚úÖ</span>
                        <span>Ê≠£Á°Æ {session.gradingResult.correctCount || 0}</span>
                      </span>
                      <span className="stat-item">
                        <span className="stat-icon">‚ùå</span>
                        <span>ÈîôËØØ {session.gradingResult.incorrectCount || 0}</span>
                      </span>
                    </div>
                  </div>
                  <div className="feedback-content-wrapper">
                    <SimpleMarkdownRenderer 
                      content={session.gradingResult?.feedback || ''} 
                      className="feedback-content enhanced"
                    />
                  </div>
                </div>

                {/* ÈîôËØØÂàÜÊûê */}
                {session.gradingResult.detailedErrors && session.gradingResult.detailedErrors.length > 0 && 
                  renderErrorDetails(session.gradingResult.detailedErrors)
                }

                {/* ÊîπËøõÂª∫ËÆÆ */}
                {session.gradingResult.suggestions && session.gradingResult.suggestions.length > 0 && 
                  renderSuggestions(session.gradingResult.suggestions)
                }

                {/* ‰ºòÁÇπÂàÜÊûê */}
                {session.gradingResult.strengths && session.gradingResult.strengths.length > 0 && 
                  renderStrengths(session.gradingResult.strengths)
                }

                {/* Á±ª‰ººÈ¢òÁîüÊàêÂå∫Âüü */}
                <div className="similar-questions-section">
                  <h4>üîÑ AIÊô∫ËÉΩÁªÉ‰π†</h4>
                  <div className="similar-questions-controls">
                    <div className="generation-options">
                      <div className="option-group">
                        <label>ÈöæÂ∫¶Á≠âÁ∫ß:</label>
                        <select 
                          value={similarQuestionsParams.difficultyLevel} 
                          onChange={(e) => setSimilarQuestionsParams({
                            ...similarQuestionsParams,
                            difficultyLevel: parseInt(e.target.value)
                          })}
                        >
                          <option value={1}>‚≠ê ÁÆÄÂçï</option>
                          <option value={2}>‚≠ê‚≠ê ËæÉÊòì</option>
                          <option value={3}>‚≠ê‚≠ê‚≠ê ‰∏≠Á≠â</option>
                          <option value={4}>‚≠ê‚≠ê‚≠ê‚≠ê ËæÉÈöæ</option>
                          <option value={5}>‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Âõ∞Èöæ</option>
                        </select>
                      </div>
                      <div className="option-group">
                        <label>ÁîüÊàêÊï∞Èáè:</label>
                        <select 
                          value={similarQuestionsParams.questionCount} 
                          onChange={(e) => setSimilarQuestionsParams({
                            ...similarQuestionsParams,
                            questionCount: parseInt(e.target.value)
                          })}
                        >
                          <option value={1}>1È¢ò</option>
                          <option value={2}>2È¢ò</option>
                          <option value={3}>3È¢ò</option>
                          <option value={5}>5È¢ò</option>
                        </select>
                      </div>
                    </div>
                    <button 
                      className="generate-similar-btn" 
                      onClick={generateSimilarQuestions}
                      disabled={generatingSimilar}
                    >
                      {generatingSimilar ? (
                        <>
                          <div className="loading-spinner-small"></div>
                          AIÁîüÊàê‰∏≠...
                        </>
                      ) : (
                        <>üéØ ÁîüÊàêÈíàÂØπÊÄßÁªÉ‰π†È¢ò</>
                      )}
                    </button>
                  </div>

                  {/* Á±ª‰ººÈ¢òÊòæÁ§∫Âå∫Âüü */}
                  {similarQuestions.length > 0 && (
                    <div className="generated-questions">
                      <h5>üéØ Âü∫‰∫é‰Ω†ÁöÑÈîôËØØÁîüÊàêÁöÑÈíàÂØπÊÄßÁªÉ‰π†È¢ò</h5>
                      {similarQuestions.map((question, index) => (
                        <div key={question.id} className="similar-question-card">
                          <div className="question-header">
                            <span className="question-number">Á¨¨ {index + 1} È¢ò</span>
                            <div className="question-meta">
                              <span className="difficulty-badge difficulty-{question.difficultyLevel}">
                                {'‚≠ê'.repeat(question.difficultyLevel)}
                              </span>
                              {question.knowledgePoints.map((kp, idx) => (
                                <span key={idx} className="knowledge-point-tag">{kp}</span>
                              ))}
                            </div>
                          </div>
                          
                          <div className="question-content">
                            <SimpleMarkdownRenderer 
                              content={question.content || ''} 
                              className="question-text"
                            />
                          </div>

                          <div className="question-actions">
                            <button 
                              className="show-answer-btn"
                              onClick={() => toggleAnswerVisibility(question.id)}
                            >
                              {visibleAnswers.has(question.id) ? 'ÈöêËóèÁ≠îÊ°à' : 'Êü•ÁúãÁ≠îÊ°à'}
                            </button>
                            
                            <div className="answer-input-section">
                              <textarea
                                placeholder="Âú®Ê≠§ËæìÂÖ•‰Ω†ÁöÑËß£Á≠î..."
                                value={questionAnswers[question.id] || ''}
                                onChange={(e) => setQuestionAnswers({
                                  ...questionAnswers,
                                  [question.id]: e.target.value
                                })}
                                className="answer-input"
                                rows={4}
                              />
                              <button
                                className="submit-answer-btn"
                                onClick={() => submitSimilarQuestionAnswer(question.id)}
                                disabled={!questionAnswers[question.id]?.trim()}
                              >
                                üìã Êèê‰∫§Âπ∂Ëé∑ÂæóAIÂèçÈ¶à
                              </button>
                            </div>
                          </div>

                          {visibleAnswers.has(question.id) && (
                            <div className="standard-answer">
                              <h6>üìö Ê†áÂáÜÁ≠îÊ°àÔºö</h6>
                              <SimpleMarkdownRenderer 
                                content={question.standardAnswer || ''} 
                                className="answer-content"
                              />
                            </div>
                          )}

                          {question.aiGradingResult && (
                            <div className="ai-feedback">
                              <h6>ü§ñ AIËØÑÂàÜÂèçÈ¶àÔºö</h6>
                              <div className="feedback-score">
                                ÂæóÂàÜÔºö{question.aiGradingResult.score}/{question.aiGradingResult.maxScore}ÂàÜ
                              </div>
                              <div className="feedback-text">
                                <SimpleMarkdownRenderer 
                                  content={question.aiGradingResult?.feedback || ''} 
                                  className="feedback-content"
                                />
                              </div>
                            </div>
                          )}

                          <div className="question-rating">
                            <span>È¢òÁõÆË¥®ÈáèËØÑÂàÜÔºö</span>
                            {[1, 2, 3, 4, 5].map(rating => (
                              <button
                                key={rating}
                                className={`rating-star ${(questionRatings[question.id] || 0) >= rating ? 'filled' : ''}`}
                                onClick={() => rateQuestion(question.id, rating)}
                              >
                                ‚≠ê
                              </button>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* AIÈóÆÁ≠îÂå∫Âüü */}
                <div className="ai-chat-section">
                  <h4>üí¨ Ëøõ‰∏ÄÊ≠•ÊèêÈóÆ</h4>
                  
                  {/* ËÅäÂ§©ÂéÜÂè≤ */}
                  {chatHistory.length > 0 && (
                    <div className="chat-history">
                      {chatHistory.map((chat, index) => (
                        <div key={index} className="chat-pair">
                          <div className="user-question">
                            <strong>üôã ‰Ω†Ôºö</strong> {chat.question}
                          </div>
                          <div className="ai-answer">
                            <strong>ü§ñ AIÔºö</strong> {chat.answer}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* ÈóÆÈ¢òËæìÂÖ• */}
                  <div className="question-input-area">
                    <textarea
                      value={aiQuestion}
                      onChange={(e) => setAiQuestion(e.target.value)}
                      placeholder="ÂêëAIÊèêÈóÆÂÖ≥‰∫éËøôÈÅìÈ¢òÁöÑ‰ªª‰ΩïÈóÆÈ¢ò..."
                      rows={3}
                      className="question-textarea"
                    />
                    <button 
                      className="ask-button"
                      onClick={handleAskAI}
                      disabled={!aiQuestion.trim() || aiThinking}
                    >
                      {aiThinking ? 'ü§î ÊÄùËÄÉ‰∏≠...' : 'üöÄ ÊèêÈóÆ'}
                    </button>
                  </div>
                </div>
              </div>
            ) : session.status === 'COMPLETED' || session.status === 'FAILED' ? (
              <div className="error-content">
                <div className="error-icon">‚ö†Ô∏è</div>
                <h4>AIÊâπÊîπÂ§±Ë¥•</h4>
                <p>Áî±‰∫éOCRËØÜÂà´Â§±Ë¥•ÔºåÊó†Ê≥ïËøõË°åAIÊâπÊîπ„ÄÇËØ∑ÂÖàËß£ÂÜ≥ÊñáÊ°£ËØÜÂà´ÈóÆÈ¢ò„ÄÇ</p>
                <div className="contact-info">
                  <p><strong>Â¶ÇÈúÄÂ∏ÆÂä©ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëòÔºö</strong></p>
                  <p>üìß <a href="mailto:3220104512@zju.edu.cn">3220104512@zju.edu.cn</a></p>
                </div>
              </div>
            ) : (
              <div className="empty-content">
                <p>ü§ñ AIÊâπÊîπÁªìÊûúÂ∞ÜÂú®Ê≠§ÊòæÁ§∫</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* ÂÖ®È°µÈù¢Â∫ïÈÉ®ËøõÂ∫¶ÊåáÁ§∫Âô® - Âè™Âú®Â§ÑÁêÜ‰∏≠ÊòæÁ§∫ */}
      {session.status === 'PROCESSING' && (
        <div className="bottom-progress-bar">
          <div className="progress-info">
            <span className="progress-message">{session.progress.message}</span>
            <span className="progress-percent">{session.progress.percent}%</span>
          </div>
          <div className="progress-track">
            <div 
              className="progress-fill" 
              style={{ width: `${session.progress.percent}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* Âà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü */}
      {showDeleteDialog && (
        <div className="delete-dialog-overlay">
          <div className="delete-dialog">
            <div className="delete-dialog-header">
              <h3>Á°ÆËÆ§Âà†Èô§ÁªÉ‰π†ËÆ∞ÂΩï</h3>
            </div>
            <div className="delete-dialog-body">
              <p>Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÊù°ÁªÉ‰π†ËÆ∞ÂΩïÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄÔºåÂåÖÊã¨ÊâÄÊúâÁöÑOCRÁªìÊûúÂíåAIÊâπÊîπÂÜÖÂÆπÈÉΩÂ∞ÜË¢´Ê∞∏‰πÖÂà†Èô§„ÄÇ</p>
            </div>
            <div className="delete-dialog-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowDeleteDialog(false)}
                disabled={deleting}
              >
                ÂèñÊ∂à
              </button>
              <button 
                className="confirm-delete-btn"
                onClick={handleDeleteSession}
                disabled={deleting}
              >
                {deleting ? 'Âà†Èô§‰∏≠...' : 'Á°ÆËÆ§Âà†Èô§'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};