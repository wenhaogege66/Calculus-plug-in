(()=>{"use strict";var e={690:(e,t,n)=>{n.d(t,{M:()=>r});var s=n(857);class r{constructor(e){this.container=e,this.init()}setCallbacks(e){this.onUploadProgress=e.onProgress,this.onUploadComplete=e.onComplete,this.onUploadError=e.onError}init(){this.render(),this.bindEvents()}render(){this.container.innerHTML='\n      <div class="homework-upload">\n        <div class="upload-header">\n          <h2>📝 上传作业</h2>\n          <p>支持PDF、TXT、JPG、PNG格式，最大10MB</p>\n        </div>\n\n        <div class="upload-area" id="uploadArea">\n          <div class="upload-icon">📄</div>\n          <div class="upload-text">点击选择文件或拖拽到这里</div>\n          <div class="upload-hint">支持多文件同时上传</div>\n        </div>\n\n        <input type="file" id="fileInput" multiple accept=".pdf,.txt,.jpg,.jpeg,.png" style="display: none;">\n\n        <div class="upload-actions">\n          <button class="btn btn-primary" id="selectFilesBtn">选择文件</button>\n          <button class="btn btn-secondary" id="pasteBtn">粘贴图片</button>\n        </div>\n\n        <div class="upload-progress" id="progressSection" style="display: none;">\n          <div class="progress-header">\n            <span id="progressText">准备上传...</span>\n            <span id="progressPercent">0%</span>\n          </div>\n          <div class="progress-bar">\n            <div class="progress-fill" id="progressFill"></div>\n          </div>\n        </div>\n\n        <div class="upload-history" id="uploadHistory">\n          <h3>📋 最近上传</h3>\n          <div class="history-list" id="historyList">\n            <div class="empty-state">\n              <p>还没有上传记录</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <style>\n        .homework-upload {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n\n        .upload-header {\n          text-align: center;\n          margin-bottom: 30px;\n        }\n\n        .upload-header h2 {\n          font-size: 24px;\n          color: #333;\n          margin-bottom: 8px;\n        }\n\n        .upload-header p {\n          color: #666;\n          font-size: 14px;\n        }\n\n        .upload-area {\n          border: 2px dashed #ddd;\n          border-radius: 12px;\n          padding: 40px 20px;\n          text-align: center;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          margin-bottom: 20px;\n          background: #fafbfc;\n        }\n\n        .upload-area:hover {\n          border-color: #667eea;\n          background: #f8f9ff;\n        }\n\n        .upload-area.dragover {\n          border-color: #667eea;\n          background: #f0f2ff;\n          transform: scale(1.02);\n        }\n\n        .upload-icon {\n          font-size: 48px;\n          margin-bottom: 12px;\n        }\n\n        .upload-text {\n          font-size: 16px;\n          color: #333;\n          margin-bottom: 8px;\n          font-weight: 500;\n        }\n\n        .upload-hint {\n          font-size: 12px;\n          color: #999;\n        }\n\n        .upload-actions {\n          display: flex;\n          gap: 12px;\n          margin-bottom: 30px;\n        }\n\n        .btn {\n          flex: 1;\n          padding: 12px 20px;\n          border: none;\n          border-radius: 8px;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.3s ease;\n        }\n\n        .btn-primary {\n          background: #667eea;\n          color: white;\n        }\n\n        .btn-primary:hover {\n          background: #5a6fd8;\n        }\n\n        .btn-secondary {\n          background: #f8f9fa;\n          color: #333;\n          border: 1px solid #dee2e6;\n        }\n\n        .btn-secondary:hover {\n          background: #e9ecef;\n        }\n\n        .upload-progress {\n          background: white;\n          padding: 20px;\n          border-radius: 12px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n          margin-bottom: 30px;\n        }\n\n        .progress-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 12px;\n        }\n\n        .progress-bar {\n          height: 8px;\n          background: #e9ecef;\n          border-radius: 4px;\n          overflow: hidden;\n        }\n\n        .progress-fill {\n          height: 100%;\n          background: linear-gradient(90deg, #667eea, #764ba2);\n          width: 0%;\n          transition: width 0.3s ease;\n        }\n\n        .upload-history {\n          background: white;\n          padding: 20px;\n          border-radius: 12px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        }\n\n        .upload-history h3 {\n          font-size: 16px;\n          color: #333;\n          margin-bottom: 15px;\n        }\n\n        .history-list {\n          max-height: 300px;\n          overflow-y: auto;\n        }\n\n        .history-item {\n          display: flex;\n          align-items: center;\n          padding: 12px;\n          border-radius: 8px;\n          margin-bottom: 8px;\n          background: #f8f9fa;\n          cursor: pointer;\n          transition: all 0.3s ease;\n        }\n\n        .history-item:hover {\n          background: #e9ecef;\n        }\n\n        .history-icon {\n          font-size: 20px;\n          margin-right: 12px;\n        }\n\n        .history-info {\n          flex: 1;\n        }\n\n        .history-name {\n          font-size: 14px;\n          font-weight: 500;\n          color: #333;\n          margin-bottom: 2px;\n        }\n\n        .history-time {\n          font-size: 12px;\n          color: #666;\n        }\n\n        .history-status {\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-size: 11px;\n          font-weight: 500;\n        }\n\n        .status-completed {\n          background: #d4edda;\n          color: #155724;\n        }\n\n        .status-processing {\n          background: #fff3cd;\n          color: #856404;\n        }\n\n        .status-failed {\n          background: #f8d7da;\n          color: #721c24;\n        }\n\n        .empty-state {\n          text-align: center;\n          padding: 40px 20px;\n          color: #999;\n        }\n      </style>\n    '}bindEvents(){const e=this.container.querySelector("#uploadArea"),t=this.container.querySelector("#fileInput"),n=this.container.querySelector("#selectFilesBtn"),s=this.container.querySelector("#pasteBtn");n.addEventListener("click",()=>t.click()),e.addEventListener("click",()=>t.click()),t.addEventListener("change",e=>this.handleFileSelect(e)),e.addEventListener("dragover",e=>this.handleDragOver(e)),e.addEventListener("dragleave",e=>this.handleDragLeave(e)),e.addEventListener("drop",e=>this.handleDrop(e)),s.addEventListener("click",()=>this.handlePasteClick()),document.addEventListener("paste",e=>this.handlePaste(e)),document.addEventListener("dragover",e=>e.preventDefault()),document.addEventListener("drop",e=>e.preventDefault())}handleFileSelect(e){const t=e.target.files;t&&t.length>0&&this.processFiles(Array.from(t))}handleDragOver(e){e.preventDefault(),e.currentTarget.classList.add("dragover")}handleDragLeave(e){e.preventDefault(),e.currentTarget.classList.remove("dragover")}handleDrop(e){e.preventDefault(),e.currentTarget.classList.remove("dragover");const t=e.dataTransfer?.files;t&&t.length>0&&this.processFiles(Array.from(t))}handlePasteClick(){alert("请使用 Ctrl+V 或 Cmd+V 粘贴图片")}handlePaste(e){const t=e.clipboardData?.items;if(t)for(let e=0;e<t.length;e++){const n=t[e];if(-1!==n.type.indexOf("image")){const e=n.getAsFile();e&&this.processFiles([e]);break}}}async processFiles(e){const t=this.validateFiles(e);if(0!==t.length)for(const e of t)await this.processFile(e)}validateFiles(e){const t=["application/pdf","text/plain","image/jpeg","image/png"];return e.filter(e=>-1===t.indexOf(e.type)?(this.showError(`不支持的文件类型: ${e.name}`),!1):!(e.size>10485760&&(this.showError(`文件过大: ${e.name}`),1)))}async processFile(e){try{this.showProgress({loaded:0,total:100,percentage:0,stage:"upload",message:`正在上传 ${e.name}...`});const t=await s.K.uploadFile(e);if(!t.success)throw new Error(t.error||"上传失败");this.showProgress({loaded:25,total:100,percentage:25,stage:"ocr",message:"正在识别数学表达式..."});const n=await s.K.createSubmission({fileUploadId:t.data.id});if(!n.success)throw new Error(n.error||"创建提交失败");this.showProgress({loaded:50,total:100,percentage:50,stage:"ocr",message:"正在OCR识别..."});const r=await s.K.processWithMyScript(t.data.id);if(!r.success)throw new Error(r.error||"OCR识别失败");this.showProgress({loaded:75,total:100,percentage:75,stage:"grading",message:"正在AI批改..."});const o=await s.K.processWithDeepseek({recognizedContent:r.data.text,originalFileId:t.data.id});if(!o.success)throw new Error(o.error||"AI批改失败");this.showProgress({loaded:100,total:100,percentage:100,stage:"saving",message:"处理完成！"});const a=await s.K.updateSubmission(n.data.id,{myScriptResult:r.data,deepseekResult:o.data,status:"completed",completedAt:(new Date).toISOString()});a.success&&this.onUploadComplete&&this.onUploadComplete(a.data),this.addToHistory(a.data),setTimeout(()=>this.hideProgress(),1e3)}catch(e){const t=e instanceof Error?e.message:"处理失败";t.includes("网络请求失败")||t.includes("Failed to fetch")?this.showError("后端服务还未部署，目前只能预览界面功能。请等待后端API开发完成。"):this.showError(`处理失败: ${t}`),this.hideProgress()}}showProgress(e){const t=this.container.querySelector("#progressSection"),n=this.container.querySelector("#progressText"),s=this.container.querySelector("#progressPercent"),r=this.container.querySelector("#progressFill");t.style.display="block",n.textContent=e.message,s.textContent=`${Math.round(e.percentage)}%`,r.style.width=`${e.percentage}%`,this.onUploadProgress&&this.onUploadProgress(e)}hideProgress(){this.container.querySelector("#progressSection").style.display="none"}showError(e){console.error(e),this.onUploadError&&this.onUploadError(e)}addToHistory(e){const t=this.container.querySelector("#historyList"),n=t.querySelector(".empty-state");n&&n.remove();const s=document.createElement("div");s.className="history-item";const r=`status-${e.status}`,o="completed"===e.status?"已完成":"processing"===e.status?"处理中":"失败";s.innerHTML=`\n      <div class="history-icon">📄</div>\n      <div class="history-info">\n        <div class="history-name">${e.fileUpload.originalName}</div>\n        <div class="history-time">${new Date(e.submittedAt).toLocaleString()}</div>\n      </div>\n      <div class="history-status ${r}">${o}</div>\n    `,s.addEventListener("click",()=>{"completed"===e.status&&this.onUploadComplete&&this.onUploadComplete(e)}),t.insertBefore(s,t.firstChild);const a=t.querySelectorAll(".history-item");a.length>10&&a[a.length-1].remove()}async loadHistory(){try{const e=await s.K.getSubmissions({limit:10});if(e.success&&e.data&&e.data.submissions.length>0){const t=this.container.querySelector("#historyList").querySelector(".empty-state");t&&t.remove(),e.data.submissions.forEach(e=>this.addToHistory(e))}}catch(e){console.error("加载历史记录失败:",e)}}}},857:(e,t,n)=>{n.d(t,{K:()=>s});const s=new class{constructor(e="http://localhost:3000/api"){this.baseUrl=e}setApiKey(e){this.apiKey=e}async request(e,t={}){try{const n=`${this.baseUrl}${e}`,s={"Content-Type":"application/json",...t.headers};this.apiKey&&(s.Authorization=`Bearer ${this.apiKey}`);const r=await fetch(n,{...t,headers:s}),o=await r.json();return r.ok?{success:!0,data:o.data||o,message:o.message}:{success:!1,error:o.message||o.error||`HTTP ${r.status}`}}catch(e){return console.error("API请求失败:",e),{success:!1,error:e instanceof Error?e.message:"网络请求失败"}}}async getCurrentUser(){return this.request("/auth/me")}async login(e,t){return this.request("/auth/login",{method:"POST",body:JSON.stringify({email:e,password:t})})}async register(e){return this.request("/auth/register",{method:"POST",body:JSON.stringify(e)})}async uploadFile(e){try{const t=new FormData;t.append("file",e);const n=await fetch(`${this.baseUrl}/files/upload`,{method:"POST",headers:{...this.apiKey&&{Authorization:`Bearer ${this.apiKey}`}},body:t}),s=await n.json();return n.ok?{success:!0,data:s.data||s}:{success:!1,error:s.message||s.error||"文件上传失败"}}catch(e){return console.error("文件上传失败:",e),{success:!1,error:e instanceof Error?e.message:"文件上传失败"}}}async createSubmission(e){return this.request("/submissions",{method:"POST",body:JSON.stringify(e)})}async getSubmission(e){return this.request(`/submissions/${e}`)}async getSubmissions(e){let t="";if(e){const n=[];for(const t in e)if(e.hasOwnProperty(t)){const s=e[t];void 0!==s&&n.push(`${t}=${encodeURIComponent(String(s))}`)}t=n.length>0?"?"+n.join("&"):""}return this.request(`/submissions${t}`)}async updateSubmission(e,t){return this.request(`/submissions/${e}`,{method:"PUT",body:JSON.stringify(t)})}async processWithMyScript(e){return this.request("/ocr/myscript",{method:"POST",body:JSON.stringify({fileUploadId:e})})}async processWithDeepseek(e){return this.request("/ai/deepseek/grade",{method:"POST",body:JSON.stringify(e)})}async searchKnowledge(e){return this.request("/rag/search",{method:"POST",body:JSON.stringify({query:e})})}async askQuestion(e,t){return this.request("/rag/ask",{method:"POST",body:JSON.stringify({question:e,context:t})})}async healthCheck(){return this.request("/health")}}}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var s=n(690),r=n(857);document.addEventListener("DOMContentLoaded",function(){console.log("侧边栏界面已加载"),document.getElementById("uploadArea"),document.getElementById("fileInput"),document.getElementById("uploadBtn"),document.getElementById("pasteBtn");const e=document.getElementById("status"),t=(document.getElementById("progress"),document.getElementById("progressBar"),document.getElementById("resultsContainer")),n=document.getElementById("resultsSection"),o=document.querySelectorAll(".tab"),a=document.querySelectorAll(".tab-content");let i=[],d=null;function c(e){const s=t.querySelector(".empty-state");s&&(s.style.display="none"),n.style.display="block";const r=function(e){const t=document.createElement("div");t.className="result-item";const n=e.deepseekResult?.score||0,s=n>=80?"#4caf50":n>=60?"#ff9800":"#f44336";return t.innerHTML=`\n      <div class="result-header">\n        <div class="result-title">${e.fileUpload?.originalName||"未知文件"}</div>\n        <div class="result-score" style="color: ${s}">${n}分</div>\n      </div>\n      <div class="result-content">\n        ${e.myScriptResult?.text?`\n          <div class="math-expression">\n            <strong>识别内容:</strong><br>\n            ${e.myScriptResult.text}\n          </div>\n        `:""}\n        \n        ${e.deepseekResult?.errors&&e.deepseekResult.errors.length>0?`\n          <div class="error-highlight">\n            <strong>发现错误:</strong><br>\n            ${e.deepseekResult.errors.map(e=>`• ${e.description}`).join("<br>")}\n          </div>\n        `:""}\n        \n        ${e.deepseekResult?.suggestions&&e.deepseekResult.suggestions.length>0?`\n          <div class="suggestion">\n            <strong>改进建议:</strong><br>\n            ${e.deepseekResult.suggestions.map(e=>`• ${e}`).join("<br>")}\n          </div>\n        `:""}\n        \n        <div style="margin-top: 10px; font-size: 12px; color: #999;">\n          ${new Date(e.submittedAt||Date.now()).toLocaleString()}\n        </div>\n      </div>\n    `,t}(e);if(t.insertBefore(r,t.firstChild),i.unshift(e),i.length>10){const e=t.lastElementChild;e&&!e.classList.contains("empty-state")&&(e.remove(),i.pop())}}function l(e){o.forEach(t=>{t.classList.remove("active"),t.getAttribute("data-tab")===e&&t.classList.add("active")}),a.forEach(t=>{t.classList.remove("active"),t.id===`${e}-tab`&&t.classList.add("active")})}function p(t,n="info"){e.textContent=t,e.className=`status ${n}`,e.style.display="block","error"!==n&&setTimeout(()=>{e.style.display="none"},3e3)}o.forEach(e=>{e.addEventListener("click",()=>l(e.getAttribute("data-tab")||"upload"))}),document.addEventListener("dragover",e=>e.preventDefault()),document.addEventListener("drop",e=>e.preventDefault()),function(){const e=document.getElementById("upload-tab");if(e){e.innerHTML='<div id="homework-upload-container"></div>';const t=document.getElementById("homework-upload-container");t&&(d=new s.M(t),d.setCallbacks({onProgress:e=>{console.log("上传进度:",e)},onComplete:e=>{console.log("上传完成:",e),l("results"),c(e)},onError:e=>{console.error("上传错误:",e),p(e,"error")}}),d.loadHistory())}}(),async function(){try{const e=await r.K.getSubmissions({limit:10});e.success&&e.data&&e.data.submissions.length>0&&e.data.submissions.forEach(e=>c(e))}catch(e){console.error("加载最近结果失败:",e)}}(),async function(){try{const e=await r.K.getCurrentUser();e.success&&e.data?p(`欢迎回来，${e.data.username||"用户"}！`,"success"):p("欢迎使用AI微积分助教","info")}catch(e){console.error("检查用户状态失败:",e),p("欢迎使用AI微积分助教","info")}}(),console.log("侧边栏界面初始化完成")})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,