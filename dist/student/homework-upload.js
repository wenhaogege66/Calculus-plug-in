(()=>{"use strict";var e={857:(e,s,t)=>{new class{constructor(e="http://localhost:3000/api"){this.baseUrl=e}setApiKey(e){this.apiKey=e}async request(e,s={}){try{const t=`${this.baseUrl}${e}`,r={"Content-Type":"application/json",...s.headers};this.apiKey&&(r.Authorization=`Bearer ${this.apiKey}`);const i=await fetch(t,{...s,headers:r}),o=await i.json();return i.ok?{success:!0,data:o.data||o,message:o.message}:{success:!1,error:o.message||o.error||`HTTP ${i.status}`}}catch(e){return console.error("API请求失败:",e),{success:!1,error:e instanceof Error?e.message:"网络请求失败"}}}async getCurrentUser(){return this.request("/auth/me")}async login(e,s){return this.request("/auth/login",{method:"POST",body:JSON.stringify({email:e,password:s})})}async register(e){return this.request("/auth/register",{method:"POST",body:JSON.stringify(e)})}async uploadFile(e){try{const s=new FormData;s.append("file",e);const t=await fetch(`${this.baseUrl}/files/upload`,{method:"POST",headers:{...this.apiKey&&{Authorization:`Bearer ${this.apiKey}`}},body:s}),r=await t.json();return t.ok?{success:!0,data:r.data||r}:{success:!1,error:r.message||r.error||"文件上传失败"}}catch(e){return console.error("文件上传失败:",e),{success:!1,error:e instanceof Error?e.message:"文件上传失败"}}}async createSubmission(e){return this.request("/submissions",{method:"POST",body:JSON.stringify(e)})}async getSubmission(e){return this.request(`/submissions/${e}`)}async getSubmissions(e){let s="";if(e){const t=[];for(const s in e)if(e.hasOwnProperty(s)){const r=e[s];void 0!==r&&t.push(`${s}=${encodeURIComponent(String(r))}`)}s=t.length>0?"?"+t.join("&"):""}return this.request(`/submissions${s}`)}async updateSubmission(e,s){return this.request(`/submissions/${e}`,{method:"PUT",body:JSON.stringify(s)})}async processWithMyScript(e){return this.request("/ocr/myscript",{method:"POST",body:JSON.stringify({fileUploadId:e})})}async processWithDeepseek(e){return this.request("/ai/deepseek/grade",{method:"POST",body:JSON.stringify(e)})}async searchKnowledge(e){return this.request("/rag/search",{method:"POST",body:JSON.stringify({query:e})})}async askQuestion(e,s){return this.request("/rag/ask",{method:"POST",body:JSON.stringify({question:e,context:s})})}async healthCheck(){return this.request("/health")}}}},s={};function t(r){var i=s[r];if(void 0!==i)return i.exports;var o=s[r]={exports:{}};return e[r](o,o.exports,t),o.exports}t.d=(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},t.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s),t(857)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,